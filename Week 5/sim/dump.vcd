$date
    Feb 10, 2023  11:28:12
$end
$version
    TOOL:	ncsim	10.20-s100
$end
$timescale
    1 ns
$end

$scope module alu_top_tb $end
$var parameter 32 !    FRAME_SIZE  $end

$scope module test_alu $end
$var parameter 32 "    BIT_LENGTH  $end
$var parameter 32 #    INSTR_LENGTH  $end
$var parameter 32 $    OPCODE_LENGTH  $end
$upscope $end


$scope module DUT $end

$scope module SPI_SLAVE $end
$var parameter 32 %    BIT_LENGTH  $end
$var parameter 32 &    COUNT_LENGTH  $end

$scope module BIT_COUNTER $end
$var parameter 32 '    COUNT_LENGTH  $end
$upscope $end


$scope module COMPARE $end
$var parameter 32 (    BIT_LENGTH  $end
$upscope $end


$scope module SPI_CONTROLLER $end
$var parameter  2 )    IDLE  $end
$var parameter  2 *    TRANSFER  $end
$var parameter  2 +    FINISH  $end
$var parameter  2 ,    WAIT_SS_HIGH  $end
$upscope $end

$upscope $end


$scope module INSTR_REG $end
$var parameter 32 -    BIT_LENGTH  $end
$upscope $end


$scope module RESULT_REG $end
$var parameter 32 .    BIT_LENGTH  $end
$upscope $end


$scope module ALU $end
$var parameter 32 /    BIT_LENGTH  $end
$var parameter 32 0    INSTR_LENGTH  $end
$var parameter 32 1    OPCODE_LENGTH  $end
$upscope $end


$scope module ALU_CONTROLLER $end
$var parameter  2 2    TRANSACTION  $end
$var parameter  2 3    LOAD  $end
$var parameter  2 4    EXEC  $end
$var parameter  2 5    REG_WRITE  $end
$upscope $end

$upscope $end

$upscope $end


$scope module memory_top $end
$var parameter 32 6    DATA_LENGTH  $end
$var parameter 32 7    ADDRESS_LENGTH  $end

$scope module SPI_SLAVE $end
$var parameter 32 8    BIT_LENGTH  $end
$var parameter 32 9    COUNT_LENGTH  $end

$scope module BIT_COUNTER $end
$var parameter 32 :    COUNT_LENGTH  $end
$upscope $end


$scope module COMPARE $end
$var parameter 32 ;    BIT_LENGTH  $end
$upscope $end


$scope module SPI_CONTROLLER $end
$var parameter  2 <    IDLE  $end
$var parameter  2 =    TRANSFER  $end
$var parameter  2 >    FINISH  $end
$var parameter  2 ?    WAIT_SS_HIGH  $end
$upscope $end

$upscope $end


$scope module SPI_REG $end
$var parameter 32 @    BIT_LENGTH  $end
$upscope $end


$scope module ADDR_REG $end
$var parameter 32 A    BIT_LENGTH  $end
$upscope $end


$scope module DATA_REG $end
$var parameter 32 B    BIT_LENGTH  $end
$upscope $end


$scope module RAM_MODULE $end
$var parameter 32 C    ADDRESS_LENGTH  $end
$var parameter 32 D    DATA_LENGTH  $end
$upscope $end


$scope module MEM_CONTROLLER $end
$var parameter  3 E    IDLE  $end
$var parameter  3 F    ADDR_LOAD  $end
$var parameter  3 G    MEM_READ  $end
$var parameter  3 H    WAIT_FOR_DATA  $end
$var parameter  3 I    DATA_LOAD  $end
$var parameter  3 J    MEM_WRITE  $end
$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b101 J
b100 I
b11 H
b10 G
b1 F
b0 E
b100000 D
b100 C
b100000 B
b100000 A
b100000 @
b11 ?
b10 >
b1 =
b0 <
b101 ;
b110 :
b110 9
b100000 8
b100 7
b100000 6
b11 5
b10 4
b1 3
b0 2
b100 1
b10100 0
b1000 /
b100000 .
b100000 -
b11 ,
b10 +
b1 *
b0 )
b101 (
b110 '
b110 &
b100000 %
b100 $
b10100 #
b1000 "
b10100 !
$end
#34413
